// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/nch-bowstave/paymail"
	"sync"
)

// Ensure, that AccountReaderWriterMock does implement paymail.AccountReaderWriter.
// If this is not the case, regenerate this file with moq.
var _ paymail.AccountReaderWriter = &AccountReaderWriterMock{}

// AccountReaderWriterMock is a mock implementation of paymail.AccountReaderWriter.
//
// 	func TestSomethingThatUsesAccountReaderWriter(t *testing.T) {
//
// 		// make and configure a mocked paymail.AccountReaderWriter
// 		mockedAccountReaderWriter := &AccountReaderWriterMock{
// 			AccountFunc: func(ctx context.Context, args paymail.Handle) (*paymail.PublicAccount, error) {
// 				panic("mock out the Account method")
// 			},
// 			CreateFunc: func(ctx context.Context, req paymail.Account) error {
// 				panic("mock out the Create method")
// 			},
// 		}
//
// 		// use mockedAccountReaderWriter in code that requires paymail.AccountReaderWriter
// 		// and then make assertions.
//
// 	}
type AccountReaderWriterMock struct {
	// AccountFunc mocks the Account method.
	AccountFunc func(ctx context.Context, args paymail.Handle) (*paymail.PublicAccount, error)

	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, req paymail.Account) error

	// calls tracks calls to the methods.
	calls struct {
		// Account holds details about calls to the Account method.
		Account []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Args is the args argument value.
			Args paymail.Handle
		}
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Req is the req argument value.
			Req paymail.Account
		}
	}
	lockAccount sync.RWMutex
	lockCreate  sync.RWMutex
}

// Account calls AccountFunc.
func (mock *AccountReaderWriterMock) Account(ctx context.Context, args paymail.Handle) (*paymail.PublicAccount, error) {
	if mock.AccountFunc == nil {
		panic("AccountReaderWriterMock.AccountFunc: method is nil but AccountReaderWriter.Account was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Args paymail.Handle
	}{
		Ctx:  ctx,
		Args: args,
	}
	mock.lockAccount.Lock()
	mock.calls.Account = append(mock.calls.Account, callInfo)
	mock.lockAccount.Unlock()
	return mock.AccountFunc(ctx, args)
}

// AccountCalls gets all the calls that were made to Account.
// Check the length with:
//     len(mockedAccountReaderWriter.AccountCalls())
func (mock *AccountReaderWriterMock) AccountCalls() []struct {
	Ctx  context.Context
	Args paymail.Handle
} {
	var calls []struct {
		Ctx  context.Context
		Args paymail.Handle
	}
	mock.lockAccount.RLock()
	calls = mock.calls.Account
	mock.lockAccount.RUnlock()
	return calls
}

// Create calls CreateFunc.
func (mock *AccountReaderWriterMock) Create(ctx context.Context, req paymail.Account) error {
	if mock.CreateFunc == nil {
		panic("AccountReaderWriterMock.CreateFunc: method is nil but AccountReaderWriter.Create was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Req paymail.Account
	}{
		Ctx: ctx,
		Req: req,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(ctx, req)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedAccountReaderWriter.CreateCalls())
func (mock *AccountReaderWriterMock) CreateCalls() []struct {
	Ctx context.Context
	Req paymail.Account
} {
	var calls []struct {
		Ctx context.Context
		Req paymail.Account
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}
